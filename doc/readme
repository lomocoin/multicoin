Mulitcoin library 0.02

Copyright (c) 2017-2019 LoMoCoin Developers
Distributed under the MIT/X11 software license, see the accompanying
file license.txt or http://www.opensource.org/licenses/mit-license.php.
This product includes software developed by the bitcoin-core Project 
for use in the libsecp256k1 (https://github.com/bitcoin-core/secp256k1).  
This product includes libkeccak-tiny (CC0) written by David Leon Gil 
(https://github.com/coruus/keccak-tiny).
This product includes RIPEMD-160 written by Antoon Bosselaers, 
ESAT-COSIC (http://homes.esat.kuleuven.be/~bosselae/ripemd160.html)



1. build
----------
main-net lib:

cd multicoin
make

test-net lib:
cd multicoin
make TESTNET=1


test program
cd multicoin
make TESTNET=1 test

2. header
----------
#include "multicoin.h"

3. type
----------
typedef enum
{
    WALLEVE_COINS_LMC=0,
    WALLEVE_COINS_BTC=1,
    WALLEVE_COINS_ETH=2,
}coin_t;

typedef struct
{
    /* data length */
    size_t len;
    /* buffer capacity */
    size_t size;
    /* buffer address */
    uint8_t *ptr;
}vch_t;

5. api
----------

// Initialize multicoin library 
int wl_multicoin_init(void);

// Release resource for multicoin library
void wl_multicoin_deinit(void);

// Create new key & return relvant address
int wl_multicoin_key_create(coin_t coin,vch_t *addr);

// Retrieve current version
int wl_multicoin_version(vch_t *ver);

// Import private key & return relvant address
int wl_multicoin_key_import(coin_t coin,const char *privkey,vch_t *addr);

// Remove key corresponding to address 
void wl_multicoin_key_remvoe(coin_t coin,const char *addr);

// Reveal private key corresponding to address
int wl_multicoin_key_privkey(coin_t coin,const char *addr,vch_t *privkey);

// Reveal public key corresponding to address
int wl_multicoin_key_pubkey(coin_t coin,const char *addr,vch_t *pubkey);

// Add script dependent on context,return relvant address
// LMC/BTC multisig: {"type":"multisig",
//                    "param":{"req":req count,
//                             "pubkeys":["pubkey1 hex","pubkey2 hex"..]}}
// LMC coldminting : {"type":"coldminting",
//                    "param":{"mint":mint address,"spent":spent address}}
int wl_multicoin_script_addnew(coin_t coin,const char *context,vch_t *addr);

// Remove script corresponding to address 
void wl_multicoin_script_remove(coin_t coin,const char *addr);

// Export script corresponding to address
int wl_multicoin_script_export(coin_t coin,const char *addr,vch_t *script);

/* Transaction */

// Parse transaction & return elems in json object
// LMC/BTC:
//   tx_data : serialized tx data
//   tx_ctxt : json array of scriptpubkey for each txin 
//           : ["script_pubkey_vin[0]","script_pubkey_vin[1]",...]
//   tx_json : tx in json
// ETH:
//   tx_data : json object, serialized tx data or tx feilds
//           : serialized data : {"hex":hex string}
//           : tx feilds :{"nonce":hex string,"gas":hex string,"price":hex string,
//                         "data":hex string,"to":hex string,"value":hex string,
//                         "r":hex string,"s":hex string,"v":hex string}
//                         "r"/"s"/"v" are optional, "v" is encoded with chainid
//   tx_ctxt : json object with address : {"from":hex string} 
//   tx_json : tx in json
int wl_multicoin_tx_parse(coin_t coin,const char *tx_data,const char *tx_ctxt,vch_t *tx_json);

// Sign transaction, return transaction data with signature
// LMC/BTC:
//   tx_data : serialized tx data
//   tx_ctxt : json array of scriptpubkey for each txin 
//           : ["script_pubkey_vin[0]","script_pubkey_vin[1]",...]
//   tx_signed : serialized tx data with signature (if have key)
// ETH:
//   tx_data : json object, serialized tx data or tx feilds
//           : serialized data : {"hex":hex string}
//           : tx feilds :{"nonce":hex string,"gas":hex string,"price":hex string,
//                         "data":hex string,"to":hex string,"value":hex string,
//                         "r":hex string,"s":hex string,"v":hex string}
//                         "r"/"s"/"v" are optional, "v" is encoded with chainid
//   tx_ctxt : json object with address : {"from":hex string} 
//   tx_signed : serialized tx data with signature (if have key)
int wl_multicoin_tx_sign(coin_t coin,const char *tx_data,const char *tx_ctxt,vch_t *tx_signed);

// Verify each signature for transacion input, return verification in json
// LMC/BTC:
//   tx_data : serialized tx data
//   tx_ctxt : json array of scriptpubkey for each txin 
//           : ["script_pubkey_vin[0]","script_pubkey_vin[1]",...]
//   ret_json : result in json
// ETH:
//   tx_data : json object, serialized tx data or tx feilds
//           : serialized data : {"hex":hex string}
//           : tx feilds :{"nonce":hex string,"gas":hex string,"price":hex string,
//                         "data":hex string,"to":hex string,"value":hex string,
//                         "r":hex string,"s":hex string,"v":hex string}
//                         "r"/"s"/"v" are optional, "v" is encoded with chainid
//   tx_ctxt : json object with address : {"from":hex string} 
//   ret_json : result in json
int wl_multicoin_tx_verify(coin_t coin,const char *tx_data,const char *tx_ctxt,vch_t *ret_json);

